#+TITLE: Emacs Configuration
#+AUTHOR: Ian J. Watson
#+PROPERTY: header-args :tangle emacs.el

# The property header above adds the tangle directive to all code
# blocks.

* Initialisation and Clean Up

Do some initial clean up. I don't want any bars out to the side, I
don't want things ringing, I don't want ~ files left all over the
place.

On the other hand, I do want MELPA to be setup, and to be using the
latest org-mode.

** Basic init

#+BEGIN_SRC emacs-lisp
  (progn
    ;(package-initialize)
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

    (setq inhibit-startup-message t)
    (defalias 'yes-or-no-p 'y-or-n-p)

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (fringe-mode 5)

    (setq ring-bell-function 'ignore)

    (setq backup-directory-alist '(("." . "~/.backups")))
    (setq backup-by-copying t		; don't clobber symlinks
	  version-control t		; use versioned backups
	  delete-old-versions t
	  kept-new-versions 6
	  kept-old-versions 2)

    (setf epa-pinentry-mode 'loopback)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    (global-set-key (kbd "M-g") 'goto-line)

    (setq debugger-stack-frame-as-list t))

  (setq-default cursor-type 'box)
#+END_SRC

#+RESULTS:
: box

** Which computer I am?

Find out which computer I'm working at

#+BEGIN_SRC emacs-lisp
  (cond ((string= (system-name) "TheBeast") (setq system 'beast))
	((string= (system-name) "gate.sscc.uos.ac.kr") (setq system 'gate))
	((string= (system-name) "ui10.sdfarm.kr") (setq system 'kisti1))
	((string= (system-name) "McAwesomes-iMac.local") (setq system 'imac))
	((string= (system-name) "BeastMaster") (setq system 'beastmaster))
	(t (setq system 'unknown)))

  (when (eq system 'beast)
    (setq home-direc "/home/iyan/"))
  (when (eq system 'beastmaster)
    (setq home-direc "/home/iyan/"))
  (when (eq system 'gate)
    (setq home-direc "/home/iwatson/")
    (add-to-list 'exec-path (concat home-direc "/install/gate/bin")))
  (when (eq system 'kisti1)
    (setq home-direc "/cms/ldap_home/iawatson/"))

  (when (eq system 'imac)
    (setq home-direc "/Users/mcawesomegary/")
    (add-to-list 'exec-path (concat home-direc "/install/bin")))

  (add-to-list 'exec-path (concat home-direc "/.local/bin"))

; keyboardio
  (when (eq system 'imac)
    (setq mac-option-modifier 'meta)
    (setq mac-command-modifier 'super))

; mac keyboard
;  (when (eq system 'imac)
;    (setq mac-option-modifier 'super)
;    (setq mac-command-modifier 'meta))

; may need this when connecting over mac to kisti/gate
;     (setq x-alt-keysym 'meta)
#+END_SRC

This is maybe not great, by default tramp deals with its connections
on a separate ControlMaster, but at some point (connecting to
lxplus?), I wanted to have the term and tramp to talk through the same
connection. This overwrites the options to ssh so it uses the
.ssh/config version.

#+BEGIN_SRC emacs-lisp
(setq tramp-ssh-controlmaster-options "")
#+END_SRC

** use-package

Now, we don't need to worry about package-install'ing packages.

#+BEGIN_SRC emacs-lisp
(require 'use-package)
#+END_SRC

From the use-package homepage: https://github.com/jwiegley/use-package

Use the =:init= keyword to execute code before a package is loaded. It
accepts one or more forms, up to the next keyword.

Similarly, =:config= can be used to execute code after a package is
loaded. In cases where loading is done lazily (see more about
autoloading below), this execution is deferred until after the
autoload occurs.

Another common thing to do when loading a module is to bind a key to
primary commands within that module:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode))
#+END_SRC

This does two things: first, it creates an autoload for the
ace-jump-mode command and defers loading of ace-jump-mode until you
actually use it. Second, it binds the key C-. to that command. After
loading, you can use M-x describe-personal-keybindings to see all such
keybindings you've set throughout your .emacs file.

Slightly different from binding a key to a keymap, is binding a key within a local keymap that only exists after the package is loaded. use-package supports this with a :map modifier, taking the local keymap to bind to.

Normally :bind expects that commands are functions that will be autoloaded from the given package. However, this does not work if one of those commands is actually a keymap, since keymaps are not functions, and cannot be autoloaded using Emacs' autoload mechanism.

To handle this case, use-package offers a special, limited variant of :bind called :bind-keymap. The only difference is that the "commands" bound to by :bind-keymap must be keymaps defined in the package, rather than command functions. This is handled behind the scenes by generating custom code that loads the package containing the keymap, and then re-executes your keypress after the first load, to reinterpret that keypress as a prefix key.

The :hook keyword allows adding functions onto hooks, here only the basename of the hook is required.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ace-jump-mode
  :hook prog-mode)

(use-package ace-jump-mode
  :hook (prog-mode . ace-jump-mode))
#+END_SRC

If your package needs a directory added to the load-path in order to load, use :load-path. This takes a symbol, a function, a string or a list of strings. If the path is relative, it is expanded within user-emacs-directory:

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ess-site
  :load-path "site-lisp/ess/lisp/"
  :commands R)
#+END_SRC

The :custom keyword allows customization of package custom variables.
The :custom-face keyword allows customization of package custom faces.

** post-use-package init packages

#+BEGIN_SRC emacs-lisp
  (use-package smex :ensure t)

  ;; (use-package keyfreq :ensure t)
  ;; (keyfreq-mode 1)
  ;; (keyfreq-autosave-mode 1)
  (use-package which-key
    :ensure t :config
    (which-key-mode))
#+END_SRC
  
* Truth and Beauty: Themes

Some useful variables for changing themes depending on the system:

=system-type= The value is a symbol indicating the type of operating
system you are using.

=(system-name)= Return the host name of the machine you are running
on, as a string.

** Poet Mode DEPRECATED

=poet-mode= is a rather lovely setup. Augment it by using some
interesting fonts. I particularly like the slanty comments.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Try also FiraCode, Hack, Input. These need to be outside
  ;; use-package to be used properly everywhere
  (set-face-attribute 'default nil :family "Hack" :width 'normal :weight 'regular :height 250)
  (set-face-attribute 'fixed-pitch nil :family "Hack")
  (set-face-attribute 'variable-pitch nil :family "Libre Baskerville" :height 250)
  (set-face-attribute 'font-lock-comment-face nil :family "Hack" :weight 'normal :slant 'italic :height 250)
  (set-face-attribute 'font-lock-keyword-face nil :family "Hack" :weight 'normal :slant 'normal :height 250)
    (add-hook 'text-mode-hook
	       (lambda ()
		(variable-pitch-mode 1)))
  (use-package poet-theme :ensure t
    :init
    :config)
#+END_SRC

** Olivetti

Centers the text of a buffer and restricts the line-width. Nice for org

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package olivetti
    :ensure t
    :after (org)
    :hook ((org-mode . olivetti-mode)
	   (org-mode . (lambda () (interactive)
			 (when (eq system 'imac)
			   (setq olivetti-body-width 120)
			 (setq olivetti-body-width 85)))))
    :config)
#+END_SRC

** Ian's theme

My attempt to create my own theme

https://gist.github.com/sylecn/fee6caf59bc6d2e84eaddb257a9f8cff
example of setting various different fonts.

#+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode :ensure t)
    (deftheme ians-theme "A theme for Ian")
    (cond 
;     ((eq system 'beast) (setq code-font "Fantasque Sans Mono") (setq code-font-size 280))
     ((eq system 'beast) (setq code-font "Operator Mono") (setq code-font-size 280))
     ((eq system 'imac) (setq code-font "Monaco") (setq code-font-size 200))
     ((eq system 'beastmaster) (setq code-font "Hack") (setq code-font-size 150))
     (t (setq code-font "DejaVu Sans Mono") (setq code-font-size 125)))

    (cond
;     ((eq system 'beast) (setq vari-font "Fantasque Sans Mono") (setq vari-font-size 280))
     ((eq system 'beast) (setq vari-font "Operator Mono") (setq vari-font-size 280))
     ((eq system 'imac) (setq vari-font "Monaco") (setq vari-font-size 200))
     ((eq system 'beastmaster) (setq vari-font "Hack") (setq vari-font-size 150))
     (t (setq vari-font "DejaVu Sans Mono") (setq vari-font-size 125)))

    ;; color palette, turn on rainbow mode to see the colors in-buffer
    (let* (

	   ;; (bg-color "#dddde7")
	   ;; (bg-color-dark "#ccccd7")
	   ;; (bg-color-very-dark "#777797")
	   ;; (bg-color-light "#e5e5f5")
	   ;; (fg-color "#222266")
	   ;; (fg-color-light "#444488")
	   ;; (fg-color-dark "#000055")
	   ;; (fg-color-very-dark "#000022")

	   ;(fg-color "#dddde7")
	   ;(fg-color-dark "#ccccd7")
	   ;(fg-color-very-dark "#777797")
	   ;(fg-color-light "#e5e5f5")
	   ;(bg-color "#222266")
	   ;(bg-color-light "#444488")
	   ;(bg-color-dark "#000055")
	   ;(bg-color-very-dark "#000022")

	   ;; (bg-color (if (eq system 'imac) "#a1cfa1" "#ddefdd"))
	   ;; (bg-color-dark "#ccd7cc")
	   ;; (bg-color-very-dark "#779777")
	   ;; (bg-color-light (if (eq system 'imac) "#bfe3bf" "#e5f5e5"))
	   ;; (fg-color (if (eq system 'imac) "#111166" "#222266"))
	   ;; (fg-color-light (if (eq system 'imac) "#222266" "#444488"))
	   ;; (fg-color-dark "#000055")
	   ;; (fg-color-very-dark "#000022")

	   ;; ;; Light mode
	   ;; (bg-color (if (eq system 'imac) "#a1a1a1" "#c4c4c4"))
	   ;; (bg-color-dark "#cccccc")
	   ;; (bg-color-very-dark "#777777")
	   ;; (bg-color-light (if (eq system 'imac) "#bfbfbf" "#d5d5d5"))
	   ;; (fg-color (if (eq system 'imac) "#111166" "#121266"))
	   ;; (fg-color-light (if (eq system 'imac) "#222266" "#444488"))
	   ;; (fg-color-dark "#000044")
	   ;; (fg-color-very-dark "#000022")

	   ;; (verb-color "#888860")
	   ;; (mid-color "#4f7f30")
	   ;; (contrast-color "#772222")
	   ;; (highlight-color "#447799")
	   ;; (success-color "#40a010")

	   ;; Dark mode
	   (bg-color "#343434") ; (if (eq system 'imac) "#a1a1a1" "#343434")
	   (bg-color-dark "#2f2f2f")
	   (bg-color-very-dark "#111111")
	   (bg-color-light "#414141") ; (if (eq system 'imac) "#bfbfbf" "#414141")
	   (fg-color "#9282f6")  ; (if (eq system 'imac) "#111166" "#9282f6")
	   (fg-color-light "#c484c8") ; (if (eq system 'imac) "#222266" "#c484c8")
	   (fg-color-dark "#777799")
	   (fg-color-very-dark "#555588")

	   (verb-color "#888860")
	   (mid-color "#6f8f50")
	   (contrast-color "#bf5353")
	   (highlight-color "#447799")
	   (success-color "#40a010")

	   
	  )
      (custom-theme-set-faces
       'ians-theme

       ;; basic colors
       `(default ((t (:foreground ,fg-color :background ,bg-color :weight light))))
       `(header-line ((t (:foreground ,fg-color-dark :background ,bg-color :weight bold :slant italic))))
       `(cursor ((t (:foreground ,mid-color :background ,mid-color))))
       `(button ((t (:underline t))))
       `(fringe ((t (:foreground ,bg-color :background ,bg-color))))
       `(link ((t (:foreground ,highlight-color))))
       `(link ((t (:foreground ,highlight-color :slant oblique :underline t))))
       `(region ((t (:background ,bg-color-dark))))
       `(success ((t (:foreground ,success-color :weight bold))))
       `(warning ((t (:foreground ,contrast-color :weight bold))))
       `(highlight ((t (:foreground ,highlight-color :weight semi-bold))))

       ;; modeline
       `(mode-line ((t (:foreground ,fg-color :background ,bg-color :weight semi-bold :slant italic :box (:line-width 3 :color ,bg-color)))))
       `(mode-line-inactive ((t (:foreground ,fg-color :background ,bg-color :weight normal :slant normal :box (:line-width 3 :color ,bg-color)))))
       `(menu ((t (:foreground ,fg-color :backgroudn ,bg-color))))
       `(minibuffer-prompt ((t (:foreground ,fg-color :background ,bg-color))))

       ;; show-paren
       `(show-paren-match ((t (:foreground ,fg-color :background ,bg-color-dark :weight normal))))

       ;; font-lock
       `(font-lock-builtin-face ((t (:foreground ,fg-color :weight light :slant italic))))
       `(font-lock-comment-face ((t (:foreground ,fg-color-light :weight light :slant italic))))
       ;; `(font-lock-comment-delimiter-face ((t (:foreground ,zenburn-green-2))))
       `(font-lock-constant-face ((t (:foreground ,mid-color))))
       `(font-lock-doc-face ((t (:foreground ,fg-color-light))))
       `(font-lock-function-name-face ((t (:foreground ,fg-color-dark))))
       `(font-lock-keyword-face ((t (:foreground ,mid-color :weight normal))))
       ;; `(font-lock-negation-char-face ((t (:foreground ,zenburn-yellow :weight bold))))
       ;; `(font-lock-preprocessor-face ((t (:foreground ,zenburn-blue+1))))
       ;; `(font-lock-regexp-grouping-construct ((t (:foreground ,zenburn-yellow :weight bold))))
       ;; `(font-lock-regexp-grouping-backslash ((t (:foreground ,zenburn-green :weight bold))))
       `(font-lock-string-face ((t (:foreground ,fg-color-light :weight normal :slant italic))))
       `(font-lock-type-face ((t (:foreground ,contrast-color))))
       `(font-lock-variable-name-face ((t (:foreground ,highlight-color))))
       `(font-lock-warning-face ((t (:foreground ,contrast-color :weight bold))))

       ;; org-mode
       `(org-level-1 ((t (:slant italic :weight bold))))
       `(org-level-2 ((t (:weight bold :inherit default))))
       `(org-date ((t (:underline t :slant italic :inherit default))))
       `(org-block ((t (:background ,bg-color-light :family ,code-font))))
       `(org-document-info-keyword ((t (:slant italic :foreground ,bg-color-very-dark :family ,code-font))))
       `(org-meta-line ((t (:background ,bg-color-dark :weight bold :family ,code-font))))
       `(org-table ((t (:background ,bg-color-light :weight normal :family ,code-font))))
       `(org-block-end-line ((t (:background ,bg-color-dark :weight bold :family ,code-font))))
       `(org-block-begin-line ((t (:background ,bg-color-dark :weight bold :family ,code-font))))
       `(org-verbatim ((t (:foreground ,verb-color :weight extra-light))))

       ;; helm
       `(helm-source-header ((t (:foreground ,fg-color :slant italic :weight bold  :background ,bg-color-light))))
       `(helm-header-line-left-margin ((t (:background ,bg-color-light :foreground ,contrast-color))))
       `(helm-candidate-number ((t (:foreground ,contrast-color))))
       `(helm-visible-mark ((t (:background ,success-color :foreground ,bg-color-very-dark))))
       `(helm-selection ((t (:background ,bg-color-very-dark :foreground ,highlight-color))))
       `(helm-buffer-directory ((t (:background ,bg-color :foreground ,contrast-color))))
       `(helm-bookmark-directory ((t (:background ,bg-color :foreground ,contrast-color))))
       `(helm-ff-directory ((t (:background ,bg-color :foreground ,contrast-color))))
       `(helm-swoop-target-word-face ((t (:background ,fg-color-dark :foreground ,bg-color-very-dark))))

       ;; magit
       `(magit-section-highlight ((t (:background ,bg-color-very-dark))))

       ;; comint
       `(comint-highlight-prompt ((t (:weight bold :slant normal))))
       `(comint-highlight-input ((t (:weight normal :slant italic))))

      ;; dired
	`(dired-directory ((t (:foreground ,contrast-color))))
       )
      (set-face-attribute 'variable-pitch nil :family vari-font :height vari-font-size)
      (set-face-attribute 'default nil :family code-font :height code-font-size) 
      ;; (set-face-attribute 'tooltip nil :family code-font :height 280)
      ;; (set-face-attribute 'fixed-pitch nil :family code-font)
      ;; (set-face-attribute 'font-lock-comment-face nil :family code-font)
      ;; (set-face-attribute 'font-lock-keyword-face nil :family code-font)
      ;; (set-face-attribute 'org-block nil :family code-font :height 280)
      )

      (setq ansi-color-names-vector
        ["black" "red3" "green3" "yellow3" "blue2" "magenta3" "cyan3" "gray90"])


  (add-hook 'text-mode-hook
	    (lambda ()
	      (variable-pitch-mode 1)))

  (custom-theme-set-variables
   'ians-theme
   )

  (provide-theme 'ians-theme)
#+END_SRC

#+RESULTS:
: ians-theme-theme

#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'custom-theme-load-path "/home/iyan/Dropbox/dot-files")
  ;; (load-theme 'ians-theme t)
#+END_SRC

Some helper functions

#+BEGIN_SRC emacs-lisp
    (defun show-face-at-point ()
      (interactive)
      (message "%s" (face-at-point)))
    (blink-cursor-mode 0)
#+END_SRC

Resources:
- http://emacsfodder.github.io/blog/notes-on-deftheme/

#+BEGIN_SRC emacs-lisp :tangle no

(add-to-list 'initial-frame-alist '(alpha . (95 . 75)))
(add-to-list 'default-frame-alist '(alpha . (95 . 75)))
(set-frame-parameter nil 'alpha '(95 . 75))

#+END_SRC

** Buffer face mode testing

https://stackoverflow.com/questions/23142699/in-gnu-emacs-how-to-set-background-color-by-mode

You could add this as a hook for per-mode backgrounds. Don't do it in
org-mode, it interferes with all the other goodness, like
source-buffers. I would say, setup ians-theme for org-mode, then add
any per-mode coloring here.

#+BEGIN_SRC emacs-lisp :tangle no
(defun buffer-background-red ()
  (interactive)
  (setq buffer-face-mode-face `(:background "#ccccff"))
  (buffer-face-mode 1))
#+END_SRC

There's also this, which seems more understandable:

#+BEGIN_SRC emacs-lisp :tangle no
  ; Define a face
  (defface purple-haze '((t :background "#ccccff")) "Purple haze")
  ; Then add a hook to the mode of your choice:
  (add-hook 'python-mode-hook
	    (lambda () ; face-remap-add-relative is where the magic happens
	      (face-remap-add-relative 'default 'purple-haze)))
#+END_SRC

* Dired

From the manual:

```If non-nil, Dired tries to guess a default target directory.
This means: if there is a Dired buffer displayed in the next
window, use its current directory, instead of this Dired buffer’s
current directory.```

#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

Subtree: can't live without it.

#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree :ensure t
    :after dired
    :bind (("C-x C-d" . dired-jump) 
	   :map dired-mode-map
	   ("<tab>" . dired-subtree-toggle)
	   ("<backtab>" . #'dired-subtree-cycle))
    :config
    (setq dired-listing-switches "-alh")
    (set-face-background 'dired-subtree-depth-1-face "#4a2727")
    (set-face-background 'dired-subtree-depth-2-face "#27274a")
    (set-face-background 'dired-subtree-depth-3-face "#274a27")
    (set-face-background 'dired-subtree-depth-4-face "#4b2a4b")
    (set-face-background 'dired-subtree-depth-5-face "#4b4b2a")
    (set-face-background 'dired-subtree-depth-6-face "#2a4b4b"))
#+END_SRC

* direnv

#+BEGIN_SRC emacs-lisp
(use-package direnv :ensure t
  :config 
  (direnv-mode)
  (setq direnv-always-show-summary nil))
#+END_SRC

* Magit

The king of all git viewers.

#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t
    :bind (("C-x g" . magit-status))
    :config
    ;; Using github, etc from magit
    (use-package forge :ensure t)
;    (add-to-list 'forge-alist '("gitlab.cern.ch" "gitlab.cern.ch/api/v4" "gitlab.cern.ch" forge-gitlab-repository))
    )
#+END_SRC

* Ivy

Navigation the right way.

Some hints:
- After =C-x C-f= for find-file, you can use =M-n= to basically run
  =ffap=
  + =M-n= in an ivy completion context is actually for the next
    history item, since when we start, there is no next in the
    history, it tries to "predict" the history by guessing you wanted
    the thing-at-point.
  + This is a general [[https://oremacs.com/2016/02/15/counsel-ffap/][ivy feature]], so works in =swiper= too to swipe
    the thing at point

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ivy :ensure t
    :bind (("C-s" . swiper)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("C-x b" . ivy-switch-buffer)
	   ("<f1> f" . counsel-describe-function)
	   ("<f1> v" . counsel-describe-variable)
	   ("<f1> l" . counsel-find-library)
	   ("<f2> i" . counsel-info-lookup-symbol)
	   ("<f2> u" . counsel-unicode-char)
	   ("C-c k" . counsel-rg)
	   ("M-y" . counsel-yank-pop)
	   :map swiper-map
	   ("M-c" . swiper-mc-fixed)
	   :map read-expression-map
	   ("C-r" . counsel-expression-history))

    :config
    (defun swiper-mc-fixed ()
      (interactive)
      (setq swiper--current-window-start nil)
      (swiper-mc))
    (use-package ivy-hydra :ensure t)
    (use-package counsel :ensure t)
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq counsel-rg-base-command "rg -S --no-heading --line-number --color never %s .")

    (use-package ivy-xref :ensure t
      :config (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))
  
    ;; Insert the file name into the buffer instead of opening it
    (defun ivy-insert-action (x)
      (with-ivy-window
	(insert x)))
    (ivy-set-actions t '(("i" ivy-insert-action "insert"))))
#+END_SRC

=ivy-rich= adds information about buffers/files

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ivy-rich
    :ensure t
    :config
    (ivy-rich-mode 0)
    (setq
     ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev))
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package helm :ensure t :config
  (require 'helm-config)
  (helm-mode 1)
  (use-package helm-system-packages :ensure t :config (require 'helm-system-packages-pacman))
  (use-package helm-swoop :ensure t :config 
    (define-key helm-swoop-map (kbd "C-l") 'kill-whole-line)
    (define-key helm-multi-swoop-map (kbd "C-l") 'kill-whole-line)
    (global-set-key (kbd "C-s") 'helm-swoop))
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (use-package helm-ag :ensure t :config (global-set-key (kbd "s-k") 'helm-ag))
  (use-package helm-google :ensure t :config (global-set-key (kbd "C-c g") 'helm-google))
  (if (eq system 'beast)
    (use-package helm-exwm :ensure t :config
    (setq helm-exwm-emacs-buffers-source (helm-exwm-build-emacs-buffers-source))
    (setq helm-exwm-source (helm-exwm-build-source))
    (setq helm-mini-default-sources `(helm-exwm-emacs-buffers-source
                                      helm-exwm-source
                                      helm-source-recentf))))
  (global-set-key (kbd "M-x") 'helm-M-x))

; (ivy-mode 0)
; (counsel-mode 0)

#+END_SRC

* Avy

#+BEGIN_SRC emacs-lisp
(use-package avy :ensure t
  :bind
  ("<XF86Tools>" . avy-goto-char)
  ("<f13>" . avy-goto-char)
  :config
  (use-package key-chord :ensure t)
  (use-package ace-window :ensure t)
  
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.02)
  (key-chord-define-global "xg" 'magit-status)
  (key-chord-define-global "qe" 'avy-goto-word-or-subword-1)
  (key-chord-define-global "qw" 'avy-goto-char)
  (key-chord-define-global ";'" 'other-window)
;;  (key-chord-define-global ",." 'delete-other-windows)
  (key-chord-define-global "zx" 'counsel-M-x)
  (key-chord-define-global "]\\" 'ace-window))
#+END_SRC

* pdf-tools

#+BEGIN_SRC emacs-lisp
(unless (eq system 'gate)
  (use-package pdf-tools :ensure t
    :config
    (pdf-tools-install)))
#+END_SRC

* Multiple Cursors

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors :ensure t
  :config
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (setq mc/always-run-for-all t) ; stop asking me you bastard
  (setq mc/list-file "~/.emacs.d/.mc-lists.el"))
#+END_SRC

* Shell

https://github.com/riscy/shx-for-emacs

Can use several special commands in shell (e.g. :diff a b to diff in
emacs), and click/enter on filenames to open in emacs

#+BEGIN_SRC emacs-lisp
(use-package shx :ensure t :config
  (shx-global-mode 1)
  (defun shx-cmd-git (_args)
    "(SAFE) Open magit in the current directory"
    (magit-status-internal default-directory)))
#+END_SRC

* geiser: scheme

#+BEGIN_SRC emacs-lisp
  (use-package geiser :ensure t
    ;; :bind (:map geiser-mode-map
    ;; 		("C-<tab>" . company-complete))
    :config
    (setq geiser-active-implementations '(guile chicken mit)))

  ; (setq geiser-active-implementations '(pyscm guile chicken))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
    (use-package org
      :bind (("C-c l" . org-store-link)
	     ("C-c a" . org-agenda)
	     ("C-c t" . org-capture)
	     ("C-c b" . org-iswitchb)
	     :map org-mode-map
	     ("C-;" . org-toggle-inline-images)
	     ("C-c e" . org-export-dispatch)
	     ("C-c C-x a" . org-archive-subtree-default)
	     ("C-c C-x C-a" . org-toggle-archive-tag)
	     ("C-c C-x t" . org-todo)

	     ("C-c p" . org-beamer-export-to-pdf))
      :init ;; minor modes get preference when searching bindings, get rid of some we don't want
      (require 'flyspell)
      (unbind-key "C-;" flyspell-mode-map)
      :config
      (unless (eq system 'gate)
	(setq
	 org-default-notes-file "~/Dropbox/org/inbox.org"
	 org-agenda-files '("~/Dropbox/org/" "~/Dropbox/2017-korea/org")
	 org-directory "/home/iyan/Dropbox/org"))
      (setq
       org-latex-images-centered nil
       org-export-use-babel t
       org-confirm-babel-evaluate nil
       org-support-shift-select t)

      ; override default emacs behaviour on mac
      (add-to-list 'org-file-apps '(directory . emacs))

      (require 'ox-beamer)
      (setq org-latex-images-centered nil)

      (add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
      (add-to-list 'image-file-name-extensions "pdf")
      (setq imagemagick-types-inhibit (remove 'PDF imagemagick-types-inhibit))
      (setq org-image-actual-width 600)
      (add-hook 'org-mode-hook 'flyspell-mode)
  ;    (add-hook 'org-mode-hook (lambda () (interactive) (setq cursor-type '(bar . 4))))

      (org-add-link-type
       "color" nil
       (lambda (path desc format)
	 (cond
	  ((eq format 'html)
	   (format "<span style=\"color:%s;\">%s</span>" path desc))
	  ((eq format 'latex)
	   (format "{\\color{%s}%s}" path desc)))))

      (use-package ob-ipython :ensure t)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (python . t)
	 (ipython . t)
	 (ditaa . t)
	 (dot . t)
	 (plantuml . t)
	 (gnuplot . t)
	 ;; (nim . t)
					    ;(sh . t)
	 (org . t)
	 ;(hy . t)
	 (scheme . t)
					    ;(julia . t)
	 (latex . t)))

      (add-to-list 'org-structure-template-alist
		   `("r" ,(concat "#+BEGIN_SRC python :session root :results file :exports results\n"
				  "?\n"
				  "#+END_SRC\n"
				  "#+ATTR_LATEX: :width 0.4\\textwidth\n"
				  "#+RESULTS:\n[[file:]]\n")))
      (add-to-list 'org-structure-template-alist
		   `("w" ,(concat "#+ATTR_LATEX: :width .5\\textwidth\n")))
      (add-to-list 'org-structure-template-alist
		   `("ss" ,(concat "#+BEGIN_SRC shell\n?\n#+END_SRC\n")))
      (add-to-list 'org-structure-template-alist
		   `("se" ,(concat "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n")))
      (add-to-list 'org-structure-template-alist
		   `("sp" ,(concat "#+BEGIN_SRC python :session\n?\n#+END_SRC\n")))
      (add-to-list 'org-structure-template-alist
		   `("spf" ,(concat "#+BEGIN_SRC python :results file :session\n?\n#+END_SRC\n")))

      (use-package deft :ensure t)
      ; turn off org-mode trying to do things with indents
      (setq org-src-preserve-indentation t
        org-edit-src-content-indentation 0)
	)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ; wget https://github.com/sabof/org-bullets/raw/master/org-bullets.el
    (when (member system '(gate kisti1)) (add-to-list 'load-path (concat home-direc "dot-files/")))
    (when (eq system 'imac) (add-to-list 'load-path (concat home-direc "Dropbox/dot-files/")))
    (when (eq system 'beastmaster) (add-to-list 'load-path (concat home-direc "Dropbox/dot-files/")))
    (require 'org-bullets)
    (setq org-bullets-bullet-list
          '("✽" "✾" "❀" "❁")
	  ;'("◉" "⦾" "•")
	  )
    (add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package poly-org :ensure t)
#+END_SRC

* Mu4e

#+BEGIN_SRC emacs-lisp
  (unless (eq system 'imac) (require 'secrets))
  (add-to-list 'load-path "~/install/mu/mu4e")
  (use-package mu4e
    :if (eq system 'beast)
    :bind (("<f12>" . mu4e)
	   ("C-0" . mu4e))
    :config
    (require 'org-mu4e)
    (require 'smtpmail)
    (setq
     mu4e-mu-binary "~/install/mu/mu/mu"
     mu4e-maildir "~/.mail"
     mu4e-trash-folder "/cern/Deleted Items"
     mu4e-refile-folder "/Archive"
     mu4e-get-mail-command "true"
     ;; mu4e-update-interval 300 ;; second
     mu4e-compose-signature-auto-include nil
     mu4e-view-show-images t
     mu4e-view-show-addresses t
     mu4e-attachment-dir "~/Downloads"
     mu4e-use-fancy-chars t
     mu4e-sent-folder "/cern/Sent Items"
     mu4e-drafts-folder "/cern/Drafts"
     smtpmail-stream-type 'starttls
     smtpmail-smtp-service 587
     user-mail-address "ian.james.watson@cern.ch"
     smtpmail-default-smtp-server "smtp.cern.ch"
     smtpmail-local-domain "cern.ch"
     smtpmail-smtp-user "iawatson"
     smtpmail-smtp-server "smtp.cern.ch"
     mu4e-context-policy 'pick-first
     mu4e-compose-context-policy nil
     message-send-mail-function 'message-send-mail-with-sendmail
     ;; we substitute sendmail with msmtp
     sendmail-program "msmtp"
     starttls-use-gnutls t
     mu4e-html2text-command "w3m -dump -s -T text/html -o display_link_number=true")
    (setq mu4e-contexts
	  `(,(make-mu4e-context
	      :name "cern"
	      :enter-func (lambda () (mu4e-message "Entering cern context"))
	      :leave-func (lambda () (mu4e-message "Leaving cern context"))
	      ;; we match based on the contact-fields of the message
	      :match-func (lambda (msg)
			    (when msg
			      (mu4e-message-contact-field-matches msg
								  :to "ian.james.watson@cern.ch")))
	      :vars '((user-mail-address . "ian.james.watson@cern.ch")
		      (mu4e-sent-folder . "/cern/Sent Items")
		      (mu4e-drafts-folder . "/cern/Drafts")
		      (user-mail-address . "ian.james.watson@cern.ch")
		      (smtpmail-default-smtp-server . "smtp.cern.ch")
		      (smtpmail-local-domain . "cern.ch")
		      (smtpmail-smtp-user . "iawatson")
		      (smtpmail-smtp-server . "smtp.cern.ch")
		      (smtpmail-stream-type . starttls)
		      (smtpmail-smtp-service . 587)
		      (message-sendmail-extra-arguments . ("-a" "cern"))
		      (user-full-name . "Ian J. Watson")
		      (mu4e-compose-signature . (concat "Cheers,\n" "Ian\n"))))))
    )
#+END_SRC

Some help on setting up contexts:

#+BEGIN_SRC emacs-lisp :tangle no
  ,(make-mu4e-context
     :name "Work"
     :enter-func (lambda () (mu4e-message "Switch to the Work context"))
     ;; no leave-func
     ;; we match based on the maildir of the message
     ;; this matches maildir /Arkham and its sub-directories
     :match-func (lambda (msg)
		   (when msg
		     (string-match-p "^/Arkham" (mu4e-message-field msg :maildir))))
     :vars '( ( user-mail-address       . "aderleth@miskatonic.example.com" )
	      ( user-full-name          . "Alice Derleth" )
	      ( mu4e-compose-signature  .
		(concat
		  "Prof. Alice Derleth\n"
		  "Miskatonic University, Dept. of Occult Sciences\n")))))
		  

  ,(make-mu4e-context
     :name "Cycling"
     :enter-func (lambda () (mu4e-message "Switch to the Cycling context"))
     ;; no leave-func
     ;; we match based on the maildir of the message; assume all
     ;; cycling-related messages go into the /cycling maildir
     :match-func (lambda (msg)
		   (when msg
		     (string= (mu4e-message-field msg :maildir) "/cycling")))
     :vars '( ( user-mail-address       . "aderleth@example.com" )
	      ( user-full-name          . "AliceD" )
	      ( mu4e-compose-signature  . nil)))))
#+END_SRC

* C/C++ [also LSP, which includes python]

Eck, this is always a pain in the bottom. Try the LSP to do this.

** =eglot=

=eglot= is a lightweight LSP client. For C++ you'll need to use [[https://github.com/MaskRay/ccls][=ccls=]],
for python, it uses [[https://github.com/palantir/python-language-server][=pyls=]].

https://github.com/joaotavora/eglot

#+BEGIN_SRC emacs-lisp
      (use-package eglot :ensure t
	:config
	; https://github.com/hansec/fortran-language-server
	(add-to-list 'eglot-server-programs '(fortran-mode . ("fortls")))
	(setq eglot-connect-timeout 120)
	(add-hook 'python-mode-hook (lambda ()
				      (interactive)
				      (local-set-key (kbd "M-n") #'flymake-goto-next-error)
				      (local-set-key (kbd "M-p") #'flymake-goto-prev-error)))
	(add-hook 'fortran-mode-hook (lambda ()
				      (interactive)
				      (local-set-key (kbd "M-n") #'flymake-goto-next-error)
				      (local-set-key (kbd "M-p") #'flymake-goto-prev-error)))
	(add-hook 'c++-mode-hook (lambda ()
				   (interactive)
				   (local-set-key (kbd "M-n") #'flymake-goto-next-error)
				   (local-set-key (kbd "M-p") #'flymake-goto-prev-error))))

    (when (eq system 'imac)
      (setq python-shell-interpreter "python3")
      (setenv "PYTHONPATH" ":~/install/root/build_root7/lib:")
      ; run with C-c C-v
      (setq python-check-command "/Users/mcawesomegary/Library/Python/3.7/bin/pytest")
      (add-to-list 'eglot-server-programs '(python-mode "/Users/mcawesomegary/Library/Python/3.7/bin/pyls")))

    (when (eq system 'gate)
      (add-to-list 'eglot-server-programs '((c++ mode c-mode) . (eglot-clangd "clangd"))))

  (use-package projectile :ensure t :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    
    (projectile-register-project-type 'cmssw '(".envrc")
      :compile "scram b -j10")

    ;; Bridge projectile and project together so packages that depend on project
    ;; like eglot work
    (defun my-projectile-project-find-function (dir)
      (let ((root (projectile-project-root dir)))
	(and root (cons 'transient root))))
  
    (with-eval-after-load 'project
      (add-to-list 'project-find-functions 'my-projectile-project-find-function)))
#+END_SRC

** emacs lsp-mode (not using currently)

#+BEGIN_SRC emacs-lisp :tangle no
(use-package lsp-mode :ensure t :config
  (setq lsp-eldoc-render-all nil)
  (setq lsp-markup-dispaly-all nil)
  (when (eq system 'imac)
    (add-to-list 'exec-path "/Users/mcawesomegary/Library/Python/3.7/bin/"))
    (setenv "PATH" (concat (getenv "PATH") ":/Users/mcawesomegary/Library/Python/3.7/bin/")))
(use-package lsp-ui :ensure t :config
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-sideline-enable nil))
(use-package company-lsp :ensure t :config)
(use-package ccls :ensure t :config
  (setq ccls-executable "/usr/bin/ccls"))
(use-package cquery :ensure t :config
  (setq ccls-executable "/usr/bin/cquery"))

(when nil  ; (eq system 'imac) 
  (use-package ccls :ensure t :config (setq cquery-executable "/usr/local/bin/ccls"))
  (use-package cquery :ensure t :config (setq cquery-executable "/usr/local/bin/cquery"))
  (use-package lsp-python-ms
  :load-path "/Users/mcawesomegary/.emacs.d/site-lisp/lsp-python-ms"
  :hook (python-mode . lsp)
  :config

  ;; for dev build of language server
  (setq lsp-python-ms-dir
        (expand-file-name "~/install/python-language-server/output/bin/Release/"))
  ;; for executable of language server, if it's not symlinked on your PATH
  (setq lsp-python-ms-executable
        (expand-file-name "~/install/python-language-server/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer"))))


#+END_SRC

** RMSBolt

#+BEGIN_SRC emacs-lisp
(use-package rmsbolt :ensure t)
#+END_SRC

** OLD irony

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package irony :ensure t
    :config
    (use-package irony-eldoc :ensure t)
    (use-package company-irony :ensure t)
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-irony))
    (require 'company)

    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'c++-mode-hook 'irony-eldoc)
    (add-hook 'c-mode-hook 'irony-eldoc)
    (add-hook 'objc-mode-hook 'irony-eldoc)

    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
    (add-hook 'objc-mode-hook 'company-mode)

    (add-hook 'c++-mode-hook (lambda () (local-set-key (kbd "C-<tab>") 'company-complete)))
    (add-hook 'c-mode-hook (lambda () (local-set-key (kbd "C-<tab>") 'company-complete)))
    (add-hook 'objc-mode-hook (lambda () (local-set-key (kbd "C-<tab>") 'company-complete)))

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

* emacs-lisp

#+BEGIN_SRC 
(add-hook 'emacs-lisp-mode-hook (lambda ()
				  (company-mode 1)
				  (local-set-key (kbd "C-<tab>") 'company-complete)))
#+END_SRC

lispy, maybe with the new keyboard paredit will end up better?

#+BEGIN_SRC emacs-lisp
(use-package lispy :ensure t
  :hook (emacs-lisp-mode-hook . show-paren-mode)
  :config
  (add-hook 'emacs-lisp-mode-hook #'lispy-mode))
#+END_SRC

** CERN ROOT in emacs setup

My own personal nonsense to look at ROOT files in emacs and to run
plotting code. You'll have to have =pymacs= setup first for it to run.

#+BEGIN_SRC emacs-lisp :tangle no

(unless (or (eq system 'gate) (eq system 'imac) (eq system 'beastmaster))
 (add-to-list 'load-path (concat home-direc ".emacs.d/lisp"))
 (require 'pymacs)
 (setq pymacs-load-path '("/Users/mcawesomegary/Dropbox/emacs-root"))
 (add-to-list 'pymacs-load-path "/Users/mcawesomegary/install/root/build_root7/lib")
 (add-to-list 'load-path "/Users/mcawesomegary/Dropbox/emacs-root")
 (unless (eq system 'gate) (require 'eroot)))
;; (load "~/.emacs.d/root-mode.el") ;; this was the old version
#+END_SRC

* golang

#+BEGIN_SRC emacs-lisp
  (use-package go-mode :ensure t
    :hook ((go-mode . go-eldoc-setup)
	   (go-mode . flycheck-mode))
    :config
    (setenv "GOPATH" "/home/iyan/go")
    (add-hook 'go-mode-hook (lambda ()
			      (set (make-local-variable 'company-backends) '(company-go))
			      (setq company-tooltip-limit 20)                      ; bigger popup window
			      (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
			      (setq company-echo-delay 0)                          ; remove annoying blinking
			      (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
			      (company-mode)))
    (add-hook 'go-mode-hook (lambda ()
			      (local-set-key (kbd "C-<tab>") 'company-complete)
			      (local-set-key (kbd "M-.") 'godef-jump)
			      (local-set-key (kbd "C-c C-d") 'godoc-at-point)
			      ))
    (add-hook 'before-save-hook #'gofmt-before-save)
    (setq gofmt-before-save t))

  (use-package company-go :ensure t :after (go-mode)
    :config)
  (use-package go-eldoc :ensure t :after (go-mode))
#+END_SRC

* Nim

#+BEGIN_SRC emacs-lisp
(use-package nim-mode :ensure t
  :config
  (add-to-list 'exec-path "~/install/Nim/bin")
  (setenv "PATH" (concat (getenv "PATH") ":~/install/Nim/bin"))
  (setenv "LD_LIBRARY_PATH" (concat (getenv "LD_LIBRARY_PATH") ":" (getenv "HOME") "/install/root/build_root/lib"))
  (require 'company)
  (add-hook 'nim-mode-hook 'nimsuggest-mode)
  (setq nimsuggest-path "~/install/Nim/bin/nimsuggest")
  (add-hook 'nimsuggest-mode-hook 'company-mode)
  (add-hook 'nimsuggest-mode-hook 'flymake-mode)
  (use-package ob-nim :ensure t))
#+END_SRC

* elfeed: rss reader

#+BEGIN_SRC emacs-lisp
(use-package elfeed-org :ensure t
  :config
  (setq elfeed-search-title-max-width 150)
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
  (define-key elfeed-show-mode-map (kbd "b") (lambda () (interactive)  (let ((browse-url-browser-function 'eww-browse-url)) (elfeed-show-visit nil))))
  (add-hook 'elfeed-show-mode-hook #'olivetti-mode))
#+END_SRC

* Random ancillary modes
** Mingus (mpd-based music player)

#+BEGIN_SRC emacs-lisp
(use-package mingus :ensure t)
#+END_SRC

** sane-term

#+BEGIN_SRC emacs-lisp
(use-package sane-term :ensure t
  :bind (("C-x t" . sane-term)
	 ("C-x T" . sane-term-create))
  :config
  (add-hook 'term-mode-hook (lambda () (interactive) (local-set-key (kbd "C-c C-l") 'sane-term-mode-toggle))))
#+END_SRC

** zig mode

#+BEGIN_SRC emacs-lisp
(use-package zig-mode :ensure t
  :config
  (autoload 'zig-mode "zig-mode" nil t)
  (add-to-list 'auto-mode-alist '("\\.zig\\'" . zig-mode)))
#+END_SRC

** lxd-tramp

#+BEGIN_SRC emacs-lisp
(use-package lxd-tramp :ensure t)
#+END_SRC

* exwm

Setup for the laptop only.
https://github.com/ch11ng/exwm

#+BEGIN_SRC emacs-lisp
  (when (eq system 'beast)
    (add-to-list 'load-path "/Users/mcawesomegary/.emacs.d/lisp/xelb")
    (require 'xcb)
    (add-to-list 'load-path "/Users/mcawesomegary/.emacs.d/lisp/exwm")
    (require 'exwm)
    (require 'exwm-config)
    (require 'desktop-environment)
    (desktop-environment-mode)
  
    (setq desktop-environment-brightness-normal-increment "5%+")
    (setq desktop-environment-brightness-normal-decrement "5%-")
    (setq desktop-environment-brightness-small-increment "1%+")
    (setq desktop-environment-brightness-small-decrement "1%-")
  
    (setq display-time-format "%l:%M %p %a %d/%m/%Y")
    (display-time-mode 1)
    (setq battery-mode-line-format " -- %b%p %L")
    (display-battery-mode)
  
    ;; this seems to work sometimes?
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)
  
    ;; Set the initial workspace number.
    (setq exwm-workspace-number 4)
    ;; Make class name the buffer name
    (add-hook 'exwm-update-class-hook
	      (lambda () (exwm-workspace-rename-buffer exwm-class-name)))
  
    ;; commands
    (exwm-input-set-key (kbd "s-p") 'helm-run-external-command)
    (exwm-input-set-key (kbd "s-s") 'helm-multi-swoop-all)
;    (exwm-input-set-key (kbd "s-f") 'helm-)
    (exwm-input-set-key (kbd "s-r") #'exwm-reset)
    (exwm-input-set-key (kbd "s-t") #'helm-top)
    (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
    (dotimes (i 10)
      (exwm-input-set-key (kbd (format "s-%d" i))
			  `(lambda ()
			     (interactive)
			     (exwm-workspace-switch-create ,i))))
    ;; 's-l': Launch application
    (exwm-input-set-key (kbd "s-l")
			(lambda (command)
			  (interactive (list (read-shell-command "$ ")))
			  (start-process-shell-command command nil command)))
    ;; Line-editing shortcuts
    (setq exwm-input-simulation-keys
	  '(([?\C-b] . [left])
	    ([?\C-f] . [right])
	    ([?\C-p] . [up])
	    ([?\C-n] . [down])
	    ([?\C-a] . [home])
	    ([?\C-e] . [end])
	    ([?\M-v] . [prior])
	    ([?\C-v] . [next])
	    ([?\C-d] . [delete])
	    ([?\C-k] . [S-end delete])))
    ;; Enable EXWM
    (exwm-enable))
#+END_SRC


Moving around windows:

#+BEGIN_SRC emacs-lisp
(when (eq system 'beast)
 (exwm-input-set-key (kbd "s-<right>") 'windmove-right)
 (exwm-input-set-key (kbd "s-<left>") 'windmove-left)
 (exwm-input-set-key (kbd "s-<up>") 'windmove-up)
 (exwm-input-set-key (kbd "s-<down>") 'windmove-down))

(when (eq system 'beast)
 (push (elt (kbd "s-<right>") 0) exwm-input-prefix-keys)
 (push (elt (kbd "s-<left>") 0) exwm-input-prefix-keys)
 (push (elt (kbd "s-<up>") 0) exwm-input-prefix-keys)
 (push (elt (kbd "s-<down>") 0) exwm-input-prefix-keys))
#+END_SRC

* Keyboardio.el

For details on the setup see:
https://github.com/algernon/kaleidoscope.el
(note the firmware setup guide is outdated)

#+BEGIN_SRC emacs-lisp
(when (eq system 'imac) (add-to-list 'load-path "/Users/mcawesomegary/Documents/Arduino/Model01-Firmware/kaleidoscope.el/"))

(if (or (eq system 'imac) (eq system 'beast))
 (use-package kaleidoscope
  :load-path "/Users/mcawesomegary/Arduino/Model01-Firmware/kaleidoscope.el/"
  :config))

#+END_SRC

A hook for compilation, basically stolen from kaleidoscope-evil-state-flash.

#+BEGIN_SRC emacs-lisp
    (defun ijw/on-compile-done (buffer msg)
      (if (string-match "^finish" msg)	; (setq msg "abc")
	  (kaleidoscope-send-command :led/setAll (kaleidoscope-color-to-rgb "#00FF00"))
	(kaleidoscope-send-command :led/setAll (kaleidoscope-color-to-rgb "#ff0000")))
      (run-at-time "1" nil (lambda () (kaleidoscope-send-command :led/setAll (kaleidoscope-color-to-rgb "#000000")))))

  (defun ijw/kaleidoscope-setup ()
    (interactive)
    (kaleidoscope-start)
    (add-hook 'compilation-finish-functions 'ijw/on-compile-done))
  (defun ijw/kaleidoscope-teardown ()
    (interactive)
    (kaleidoscope-quit)
    (remove-hook 'compilation-finish-functions 'ijw/on-compile-done))
#+END_SRC

* global key bindings, particularly for keyboardio

  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x f") 'counsel-find-file)
  (global-set-key (kbd "C-x s") 'save-buffer)
  (global-set-key (kbd "C-c c") 'compile)
  (global-set-key (kbd "C-x d") 'dired-jump)
  (global-set-key (kbd "C-x C-d") 'dired)
  (global-set-key (kbd "<home>") 'company-complete)
  (use-package expand-region :ensure t)
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "M-s-e") 'eval-region)

  ;; the following are mapped to prefix layers on backspace and space
  ;; respectively. They're suppose to do the deletion/whitespace
  ;; equivalent of the vim "hjkl" movement commands (shifted by 1 key
  ;; so we can stay on the home position)
  (bind-keys :map global-map
	     :prefix-map deletion-key-map
	     :prefix "M-s-d"
	     ("j" . backward-delete-char-untabify)
	     (";" . delete-forward-char)
	     ("k" . kill-visual-line)
  	     ("l" . (lambda () (interactive) (kill-visual-line 0)))
	     ("h" . undo)
	     ;; this should really be kill paragraph
	     ("i" . backward-kill-word)
	     ("o" . kill-word)
	     ("u" . backward-kill-word)
	     ("p" . kill-word)
	     )

  (bind-keys :map global-map
	     :prefix-map whitespace-key-map
	     :prefix "M-s-w"
	     ("j" . (lambda () (interactive) (insert " ") (left-char)))
	     (";" . (lambda () (interactive) (insert " ")))
	     ("k" . newline)
  	     ("l" . open-line)
	     ("h" . undo))
  #+END_SRC
(read-key)

* Anki

#+BEGIN_SRC emacs-lisp

  (use-package anki-editor :ensure t
	    :config
	    (defun new-hanja ()
	      (interactive)
	      (insert "*                                                             :korean:hanja:
	  :PROPERTIES:
	  :ANKI_NOTE_TYPE: HanjaCard
	  :END:

  ""** Front

  ""** Back

  "))

  ;;; Below is attempt to write the notes into a org structure, insert note part not working

	    (defun anki-editor-get-decks ()
	      (let ((deck-alist (cdar (anki-editor--anki-connect-invoke 'deckNamesAndIds))))
		(map 'list (lambda (deck) (symbol-name (car deck))) deck-alist)))
	  
	    (defun anki-editor-card-list (deck-name)
	      2  (cdar (anki-editor--anki-connect-invoke 'findCards `((query . ,(concat "deck:" deck-name))))))
	  
					  ; NB Notes are the database entry in Anki, cards are
					  ; notes+presentation info in deck (can be many cards for a single
					  ; note, e.g. cloze note with multiple possible deletions shows as one
					  ; card per deletion). anki-editor looks like it works with notes
					  ; (e.g. assigns the note-id to org prop list)
	    (defun anki-editor-notes-list (deck-name)
	      (cdar (anki-editor--anki-connect-invoke 'cardsToNotes
						      `((cards . ,(anki-editor-card-list deck-name))))))
	  
	    (defun anki-editor-notes-info (deck-name)
	      (anki-editor--anki-connect-invoke 'notesInfo
						`((notes . ,(anki-editor-notes-list deck-name)))))
	    )


  (defun anki-editor-insert-note-from-info (note-info)
    (let ((noteId (alist-get 'noteId note-info))
	  (model-name (alist-get 'modelName note-info))
	  (tags (alist-get 'tags note-info))
	  (fields (alist-get 'fields note-info)))
      (insert "* :" (string-join tags ":") ":\n")
      ;; (map (lambda (field) (insert "** "
      ;; 				 ; (alist-get 'value (cdr field))
      ;; 				 ))
      ;; 	 fields))
    ))
#+END_SRC

* GPG

#+BEGIN_SRC emacs-lisp
(defun ledger-mac ()
  (interactive)
  (setenv "GNUPGHOME" "/Users/mcawesomegary/.gnupg/ledger-openpgp")
  (setenv "SSH_AUTH_SOCK" "/Users/mcawesomegary/.gnupg/ledger-openpgp/S.gpg-agent.ssh")
  (setq epg-gpg-program "/usr/local/MacGPG2/bin/gpg"))
#+END_SRC

* Postscript: Setting up This File

The following tangles this very file after save, so all you need to
put in your config is =(load-file "~/Dropbox/dot-files/emacs.el")=

#+BEGIN_SRC emacs-lisp
  (defun my/tangle-on-save-emacs-config-org-file ()
    (when (or (string= buffer-file-name (file-truename "~/Dropbox/dot-files/emacs.org"))
	      (string= buffer-file-name (concat home-direc "dot-files/emacs.org")))
      (org-babel-tangle)))
  (add-hook 'after-save-hook #'my/tangle-on-save-emacs-config-org-file)
#+END_SRC

Maybe also add =(custom-set-variables)= above it so that the theme
code can be added before the load.

* Fullscreen

#+BEGIN_SRC emacs-lisp
(when (eq system 'imac)
  (toggle-frame-fullscreen))
#+END_SRC

* Startup buffers

#+BEGIN_SRC emacs-lisp
(org-toggle-sticky-agenda t)
(defun ijw-agenda ()
  (interactive)
  (delete-other-windows)
  (org-agenda-list)
  (org-todo-list))
(global-set-key (kbd "<f10>") 'ijw-agenda)
(when (eq system 'beast) (ijw-agenda))

(use-package dashboard :ensure t 
:bind (:map dashboard-mode-map ("e" . elfeed))
:config 
  (setq dashboard-center-content nil)
  (setq dashboard-startup-banner 'official)
  (setq dashboard-banner-logo-title nil)
  (defun dashboard-insert-custom (list-size)
   (insert "Elfeed (e)\nOther"))
  (add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
  (add-to-list 'dashboard-items '(custom) t)
  (setq dashboard-items '(
   (agenda . 5)
   (recents  . 5)
   (bookmarks . 5)
   (projects . 5)
   (custom)
  ))
  (setq show-week-agenda-p nil)
  (dashboard-setup-startup-hook))

;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
; (load "/home/iyan/.opam/4.06.1/share/emacs/site-lisp/tuareg-site-file")
(when (eq system 'beast) (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el"))
;; ## end of OPAM user-setup addition for emacs / base ## keep this line
#+END_SRC

